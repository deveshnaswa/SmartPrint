@model SmartPrint.ViewModels.PrintJobsViewModel

@{
    ViewBag.Title = "Create";
}
@section Scripts {
    <script>
        var unitColorCost = @Model.ColorUnitcost;
        var unitMonoCost = @Model.MonoUnitcost;
        var printerDetails = @Html.Raw(Json.Encode(
            ViewBag.PrinterList
        ));
        function CalculatePrintCost()
        {
            var pagesFrom = parseInt($('#PagesFrom').val());
            var pagesTo = parseInt($('#PagesTo').val());
            var totalNoOfPages = Math.abs((pagesTo - pagesFrom)) + 1;
            var noOfCopies = parseInt($('#NumCopies').val());
            var isColorSelected = $('#IsColor').is(":checked");
            var totalPrintingCost = 0;
            if (isColorSelected)
            {
                totalPrintingCost = totalNoOfPages * unitColorCost * noOfCopies;
            }
            else
            {
                totalPrintingCost = totalNoOfPages * unitMonoCost * noOfCopies;
            }
            $('#TotalPageCost').val(totalPrintingCost);
        }
        function GetPrinterProperties() {
            var printerSelected = $('#PrinterName').val();
            if (printerSelected == "") {
                ColorPrintingSettings(false);
                DuplexPrintingSettings(false);
            }
            else {
                var selectedPrinterDetails = printerDetails[printerSelected];
                ColorPrintingSettings(selectedPrinterDetails.IsColored);
                DuplexPrintingSettings(selectedPrinterDetails.IsDuplex);
            }
            CalculatePrintCost();
        }


        function ColorPrintingSettings(state) {
            if (state == false) {
                if (!$("#IsColor").is(':disabled')) {
                    $('#IsColor').attr('checked', false);
                    $('#IsColor').attr('disabled', 'disabled');
                }
                else {
                    $('#IsColor').removeAttr('disabled');
                    $('#IsColor').attr('checked', false);
                    $('#IsColor').attr('disabled', 'disabled');
                }
            }
            else if (state == true) {
                if (!$("#IsColor").is(':disabled')) {
                    $('#IsColor').attr('checked', false);
                }
                else {
                    $('#IsColor').removeAttr('disabled');
                    $('#IsColor').attr('checked', false);
                }
            }

        }


        function DuplexPrintingSettings(state) {
            if (state == false) {

                if (!$("#IsDuplex").is(':disabled')) {
                    $('#IsDuplex').attr('checked', false);
                    $('#IsDuplex').attr('disabled', 'disabled');
                }
                else {
                    $('#IsDuplex').removeAttr('disabled');
                    $('#IsDuplex').attr('checked', false);
                    $('#IsDuplex').attr('disabled', 'disabled');
                }
            }
            else if (state == true) {
                if (!$("#IsDuplex").is(':disabled')) {
                    $('#IsDuplex').attr('checked', false);
                }
                else {
                    $('#IsDuplex').removeAttr('disabled');
                    $('#IsDuplex').attr('checked', false);
                }
            }

        }
        $(document).ready(function () { GetPrinterProperties(); });
    </script>

}
<div class="row">
    <h2 >Print <span class="text-success">@Model.DocumentName</span></h2>
</div>

<hr />

<div id="form">


    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true, null ,new { @class = "text-danger" })
            <div class="row">
                <div class="col-md-6">
                    @Html.HiddenFor(model => model.DocumentId)
                    @Html.HiddenFor(model => model.PrintcostId)

                    <div class="form-group">

                        @Html.LabelFor(model => model.PrinterName, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownListFor(model => model.PrinterName, new SelectList(ViewBag.PrinterList, "Key", "Key"),"Select Printer",htmlAttributes: new { @class = "form-control", @onchange = "GetPrinterProperties()" })
                            @Html.ValidationMessageFor(model => model.PrinterName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.PagesFrom, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.PagesFrom, new { htmlAttributes = new { min = 1, max = ViewBag.TotalPages, @class = "form-control" ,@onchange = "CalculatePrintCost()" } })
                            @Html.ValidationMessageFor(model => model.PagesFrom, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.PagesTo, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.PagesTo, new { htmlAttributes = new { min = 1, max = ViewBag.TotalPages, @class = "form-control", @onchange = "CalculatePrintCost()" } })
                            @Html.ValidationMessageFor(model => model.PagesTo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.NumCopies, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.NumCopies, new { htmlAttributes = new { min = 1, max = 10, @class = "form-control", @onchange = "CalculatePrintCost()" } })
                            @Html.ValidationMessageFor(model => model.NumCopies, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.IsColor, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.IsColor, new { htmlAttributes = new { @class = "form-control", @onchange = "CalculatePrintCost()" ,disabled = "disabled" } })
                            @Html.ValidationMessageFor(model => model.IsColor, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.IsDuplex, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.IsDuplex, new { htmlAttributes = new { @class = "form-control" ,disabled = "disabled" } })
                            @Html.ValidationMessageFor(model => model.IsDuplex, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.TotalPageCost, htmlAttributes: new { @class = "control-label col-md-4"})
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.TotalPageCost, new { htmlAttributes = new { @class = "form-control", disabled="disabled" } })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-4 col-md-8">
                            <input type="submit" value="Print" class="btn btn-primary" />
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="embed-responsive embed-responsive-4by4">
                        <iframe class="embed-responsive-item" id="FileReload" src="@ViewBag.DocumentPath" type="Content-Disposition: inline; @ViewBag.MimeMappings">></iframe>
                    </div>
                </div>
            </div>
        </div>


                    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>
